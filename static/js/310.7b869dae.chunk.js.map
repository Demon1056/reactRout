{"version":3,"file":"static/js/310.7b869dae.chunk.js","mappings":"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","sources":["components/MoviesList/MovieItem.jsx","components/MoviesList/MoviesList.jsx","pages/Movies/Movies.styled.js","pages/Movies/Movies.jsx","servise/moviesApi.js"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\n\nexport const MovieItem = ({ movie }) => {\n  const location = useLocation();\n  return (\n    <li>\n      <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n        {movie.title || movie.name}\n      </Link>\n    </li>\n  );\n};\n","import { MovieItem } from './MovieItem';\n\nexport const MoviesList = ({ movies, title }) => {\n  \n    return (\n    <div>\n      <h1>{title}</h1>\n      <ul>\n        {movies.map(movie => (\n          <MovieItem key={movie.id} movie={movie} />\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import styled from \"styled-components\";\n export const ContainerMovies = styled.div`\n background-color: yellow;`","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport { Loader } from 'components/Loader/Loader';\n\nimport { ContainerMovies } from './Movies.styled';\n\nimport { getMovieByName } from 'servise/moviesApi';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const makeUpdateData = movies =>\n    movies.map(({ id, title, name }) => ({ id, title, name }));\n\n  const value = searchParams.get('query');\n\n  useEffect(() => {\n    const getMovies = async name => {\n      if (!name) {\n        return;\n      }\n      try {\n        setIsLoading(true);\n        const res = await getMovieByName(name);\n        const updateMovies = makeUpdateData(res);\n        setMovies(updateMovies);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getMovies(value);\n  }, [value]);\n\n  return (\n    <ContainerMovies>\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          const query = e.target[0].value;\n          if (!query) {\n            console.log('Input name of movie please');\n            return setSearchParams({});\n          }\n          setSearchParams({ query });\n          e.target.reset();\n        }}\n      >\n        <input type=\"text\" name=\"movie\" />\n        <button type=\"submit\">Search</button>\n      </form>\n      {movies && !isLoading && (\n        <MoviesList movies={movies} title={`Movies with ${value} letters`} />\n      )}\n      {isLoading && Loader}\n    </ContainerMovies>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst BASEURL = 'https://api.themoviedb.org/3';\nconst AUTH_TOKEN =\n  'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJhYjY1YTNiN2Y5NWUyMjQyZmQwM2RlN2IzMzAyODhiNyIsInN1YiI6IjYzNmFhYTRlOWQ2ZTMzMDA3YTViNDYxMCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.1PsLFsO9fG4eV0HqtD51yNs18xB47fHVSbOrLH4wGmQ';\n\naxios.defaults.baseURL = BASEURL;\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n\nexport const getTrending = async () => {\n  const res = await axios('trending/all/day');\n  return res.data.results;\n};\n\nexport const getMovieById = async id => {\n  const res = await axios(`movie/${id}`);\n  return res.data;\n};\nexport const getCasts = async id => {\n  const res = await axios(`movie/${id}/credits`);\n  return res.data.cast;\n};\n\nexport const getReviews = async id => {\n  const res = await axios(`movie/${id}/reviews`);\n  return res.data.results;\n};\n\nexport const getMovieByName = async query => {\n  const res = await axios(`search/movie?query=/${query}`);\n  return res.data.results;\n};\n"],"names":["MovieItem","_ref","movie","location","useLocation","_jsx","children","Link","to","concat","id","state","from","title","name","MoviesList","movies","_jsxs","map","ContainerMovies","styled","_templateObject","_taggedTemplateLiteral","_useState","useState","_useState2","_slicedToArray","setMovies","_useState3","_useState4","isLoading","setIsLoading","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","makeUpdateData","value","get","useEffect","getMovies","_ref2","_asyncToGenerator","_regeneratorRuntime","_callee","res","updateMovies","_context","prev","next","abrupt","getMovieByName","sent","t0","console","log","finish","stop","_x","apply","arguments","onSubmit","e","preventDefault","query","target","reset","type","Loader","axios","getTrending","data","results","getMovieById","_callee2","_context2","getCasts","_ref3","_callee3","_context3","cast","_x2","getReviews","_ref4","_callee4","_context4","_x3","_ref5","_callee5","_context5","_x4"],"sourceRoot":""}